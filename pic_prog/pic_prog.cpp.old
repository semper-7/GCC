/*Arduino 12V PIC programmer
Semper@2017-2018

	12V VPP Sheet
PB4___        VPP(12V)
D12   )|       |
      )|       |
100uH )|       | Zener 10V
      )| 1n4148|  _    LED yellow
     _|---|>|--+--|<|--|>|--
PB3_|_ 2n7000  |            |
D11   |       === 1,0       |
GND___|________|____________|

PIC12F635:
PIN	PINNAME	Arduino 
1	VDD	PB5(D13)
2	NC
3	NC
4	VPP	VPP(12V)
5	NC
6	CLOCK	PC1(A1)
7	DATA	PC0(A0)
8       GND	GND
*/

#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include "../lib/delay.h"
#include "../lib/usart.h"

int main (void); 
typedef uint8_t byte;
typedef uint16_t word;
#define DC (F_CPU/4000000UL)

word addr;
byte strVal[4];

void Reset() {
PORTB = 0x10;
delay(500);
PORTB = 0x30;
addr = 0;
} 

void Power() {
DDRB = DDRC = PORTB = PORTC = 0;
 for(;;) {
 UsartPrintPGM(PSTR("Send s to start\r\n"));
  if (UsartRead(0)=='s') {
  DDRB = 0x38;
  Reset();
  DDRC = 3;
  UsartPrintPGM(PSTR("Pic detected. Supported commands: e,r,d,p,c,f,R,q\r\n"));
  return;
  }
 }
}

void WriteBit(byte v) {
PORTC = v|2;
_delay_loop_2(3*DC);
PORTC &= 1 ;
_delay_loop_2(3*DC);
PORTC = 0;
}

byte ReadBit() {
PORTC = 2;
_delay_loop_2(3*DC);
byte v = PINC & 1;
PORTC =0;
_delay_loop_2(3*DC);
return v;
}

word ReadDataFromProgramMemory() {
byte w[2];
*((word*)(&w[0]))=0;
WriteBit(0);
WriteBit(0);
WriteBit(1);
WriteBit(0);
WriteBit(0);
WriteBit(0);
DDRC = 2;
_delay_loop_2(3*DC);
ReadBit();
 for(byte i=0;i<14;i++) {
 w[1] |= ReadBit() << 6;
 *((word*)(&w[0])) >>=1;
 }
ReadBit();
DDRC =3;
return *((word*)(&w[0]));
}

void LoadDataCommandForProgramMemory(word w) {
WriteBit(0);
WriteBit(1);
WriteBit(0);
WriteBit(0);
WriteBit(0);
WriteBit(0);
_delay_loop_2(3*DC);
WriteBit(0);
for(byte i=0;i<14;i++,w>>=1) WriteBit(w&1);
WriteBit(0);
_delay_loop_2(3*DC);
}

void BeginProgrammingCycle() {
WriteBit(0);
WriteBit(0);
WriteBit(0);
WriteBit(1);
WriteBit(0);
WriteBit(0);
delay(10);
}

void BulkEraseProgramMemory() {
WriteBit(1);
WriteBit(0);
WriteBit(0);
WriteBit(1);
WriteBit(0);
WriteBit(0);
delay(100);
}

void IncrementAddress() {
WriteBit(0);
WriteBit(1);
WriteBit(1);
WriteBit(0);
WriteBit(0);
WriteBit(0);
_delay_loop_2(3*DC);
}

void LoadConfiguration(word w) {
WriteBit(0);
WriteBit(0);
WriteBit(0);
WriteBit(0);
WriteBit(0);
WriteBit(0);
_delay_loop_2(3*DC);
WriteBit(0);
for(byte i=0;i<14;i++,w>>=1) WriteBit(w&1);
WriteBit(0);
_delay_loop_2(3*DC);
}

void HexPrintByte(byte v) {
char hextab[] = "0123456789ABCDEF";
UsartWrite(hextab[v>>4]);
UsartWrite(hextab[v&0x0f]);
} 
  
void HexPrint(word w) {
HexPrintByte((uint8_t)(w>>8));
HexPrintByte((uint8_t)(w&0xff));
} 

void HexPrintLine() {
HexPrint(addr);
UsartPrint(": ");
 for(byte j=0;j<16;j++) {
 HexPrint(ReadDataFromProgramMemory());
 IncrementAddress();
 }
UsartPrint("\r\n");
addr+=16;
}

int main (void) {
DelayInit();
UsartInit(115200);
TIMSK2 = TCCR2B = TCCR2A = 0;
OCR2A = 3; 
TCCR2A = 0x42;
TCCR2B = 1;
sei();
Power();

loop:
word w;
byte v;
byte k;

 switch(UsartRead(0)) {

 case 'e' :
 BulkEraseProgramMemory();
 UsartPrintPGM(PSTR("Program Memory is erased!!!\r\n"));
 break;

 case 'r' :
 HexPrintLine();
 break;

 case 'd' :
 for(byte k=0;k<64;k++) HexPrintLine();
 break;

 case 'p' :
 Reset();
 UsartPrintPGM(PSTR("Start programming ..."));
  for (;;) {
  k = '0';
  w = 0;
  pnew:
   for(byte i=0;i<4;i++) {
    do {
    v = UsartRead(0);
    } while (v == '\n');
    if (v == '\r') {
     if (v == k) {
     UsartPrintPGM(PSTR("\r\nDone.\r\n"));
     goto pend;
     }
    k = v;
    UsartPrint("\r\n");
    HexPrint(addr);
    UsartPrint(": ");
    goto pnew;
    } 
   UsartWrite(v);
   if (v>0x40) v-=7;
   w=(w<<4) | (word)(v&=0x0f);
   }
   LoadDataCommandForProgramMemory(w);
   BeginProgrammingCycle();
    if (w != ReadDataFromProgramMemory()) {
    UsartPrintPGM(PSTR("\r\nERROR PROGRAMMING!!!\r\n"));
    goto error;
    }
   IncrementAddress();
   addr++;
  }
 pend:
 break;

 case 'c' :
 UsartPrintPGM(PSTR("Configuration memory:\r\n"));
 LoadConfiguration(0);
 addr = 0x2000;
 HexPrintLine();
 break;

 case 'f' :
 UsartPrintPGM(PSTR("Fuse 200"));
 w=0;
 v = UsartRead(0);
 UsartWrite(v);
 UsartWrite('=');
  for(byte i=0;i<4;i++) {
  strVal[i] = UsartRead(0);
  UsartWrite(strVal[i]);
  if (strVal[i]>0x40) strVal[i]-=7;
  w=(w<<4) | (word)(strVal[i]&=0x0f);
  }
 LoadConfiguration(0);
 for(byte i=v;i>48;i--) IncrementAddress();
 LoadDataCommandForProgramMemory(w);
 BeginProgrammingCycle();
 if (w != ReadDataFromProgramMemory()) UsartPrintPGM(PSTR("\r\nERROR PROGRAMMING!!!\r\n"));
 UsartPrintPGM(PSTR("\r\nEnd fuse programming\r\n"));
 break;

 case 'R' :
 UsartPrintPGM(PSTR("Reset\r\n"));
 Reset();
 break;

 case 'q' :
 error:
 UsartPrintPGM(PSTR("Power OFF\r\n^"));
 Power();
 break;
 }
goto loop;
}
